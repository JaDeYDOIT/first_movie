<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- movie.xml -->


<mapper namespace="theater">
<<<<<<< HEAD
	<select id="regionlist"
		resultType="kr.co.fmos.theater.TheaterregionDTO">
		SELECT region_id, region
		FROM region
	</select>
=======
   <select id="regionlist"
      resultType="kr.co.fmos.theater.TheaterregionDTO">
      SELECT region_id, region
      FROM region
   </select>
>>>>>>> ad2f1f70d66a628ba2e059671f2e5162d66a1945

   <select id="branchlist"
      resultType="kr.co.fmos.theater.TheaterbranchDTO"
      parameterType="String">
      SELECT region_id, branch_name, branch_address,
      branch_id,
      branch_number
      FROM theater_branch
      WHERE region_id =
      #{region_id}
   </select>
   
   <!-- CustomerCont 에서 호출 시작 -->
	
	<select id="branchselectbox"
	    resultType="java.util.Map"
	    parameterType="String">
	    select tb.branch_id, tb.region_id, tb.branch_name
	    from theater_branch tb join region r
	    on tb.region_id = r.region_id 
	    where r.region_id= #{region_id}
	</select>
	
	<select id="screenselectbox"
	    resultType="java.util.Map">
	    select s.screen_id , s.screen_location 
		from theater_branch tb join screen s 
		on tb.branch_id = s.branch_id
		where s.branch_id = #{branch_id};
	</select>
<<<<<<< HEAD
	
	<!-- CustomerCont 에서 호출 시작 -->
	
	<select id="branchselectbox"
	    resultType="java.util.Map"
	    parameterType="String">
	    select tb.branch_id, tb.region_id, tb.branch_name
	    from theater_branch tb join region r
	    on tb.region_id = r.region_id 
	    where r.region_id= #{region_id}
	</select>
	
	<select id="screenselectbox"
	    resultType="java.util.Map">
	    select s.screen_id , s.screen_location 
		from theater_branch tb join screen s 
		on tb.branch_id = s.branch_id
		where s.branch_id = #{branch_id};
	</select>
	
	<select id="movieselectbox" resultType="java.util.Map">
		select m.movie_id , m.movie_name 
		from screen_movie_information smi join movie m 
		on smi.movie_id = m.movie_id
		where smi.screen_id = #{screen_id}
	</select>
	
	<select id="Rental_inquiry_area" resultType="String">
		select region 
		from region
		where region_id = #{rental_inquiry_area}
	</select>
	
	<select id="rental_inquiry_place" resultType="String">
		select branch_name 
		from theater_branch
		where branch_id = #{rental_inquiry_place}
	</select>
	
	<select id="rental_inquiry_place" resultType="String">
		select screen_location 
		from screen
		where screen_id = #{rental_inquiry_theater}
	</select>
	
	<select id="rental_inquiry_movie" resultType="String">
		select movie_name 
		from movie
		where movie_id = #{movie_id}
	</select>
	
	<!-- CustomerCont 에서 호출 끝 -->

	<select id="branchimg"
		resultType="kr.co.fmos.theater.TheaterbranchDTO">
		SELECT branch_img
		FROM theater_branch
		WHERE branch_id =
		#{branch_id}
	</select>

	<!-- 구조화된 값을 담을떄는 그냥 구조에 맞춰 DTO클래슬 만들면 되지만, -->
	<!-- 그냥 여기 저기 테이블에 있는 값을 조인후 가져와서 잠깐 쓸거면 Map에 담으면 됩니다 -->
	<!-- <select id="screenlist2" resultType="kr.co.fmos.theater.Screen_movie_informationDTO" 
		parameterType="int"> -->
	<!-- SELECT DISTINCT region_id, TB.branch_id, branch_name, TB.branch_img, -->
	<!-- movie_showing_date, movie_name, movie_genre_id, movie_running_time, -->
	<!-- movie_production_year, screen_location, screen_seat_count, -->
	<!-- movie_showing_time -->
	<!-- FROM screen SC JOIN screen_movie_information SMI -->
	<!-- ON SC.screen_id = SMI.screen_id JOIN theater_branch TB -->
	<!-- ON region_id = TB.region_id JOIN movie MV -->
	<!-- ON SMI.movie_id = MV.movie_id -->
	<!-- where TB.branch_id = #{branch_id} -->
	<!-- ORDER BY screen_location -->
	<!-- </select> -->

	<!-- <select id="screenlist" resultType="java.util.Map" parameterType="int"> -->
	<!-- SELECT DISTINCT region_id, TB.branch_id, branch_name, TB.branch_img, -->
	<!-- movie_showing_date, movie_name, MG.movie_genre_id, movie_running_time, -->
	<!-- movie_production_year, screen_location, screen_seat_count, -->
	<!-- movie_showing_time, MG.movie_genre_name, MV.movie_id -->
	<!-- FROM screen SC JOIN screen_movie_information SMI -->
	<!-- ON SC.screen_id = SMI.screen_id JOIN theater_branch TB -->
	<!-- ON region_id = TB.region_id JOIN movie MV -->
	<!-- ON SMI.movie_id = MV.movie_id JOIN movie_genre MG -->
	<!-- ON MG.movie_genre_id = MV.movie_genre_id -->
	<!-- where TB.branch_id = #{branch_id} -->
	<!-- ORDER BY screen_location -->
	<!-- </select> -->

	<!-- <select id="screenlist" resultType="java.util.Map"
		parameterType="int">
		select tb.branch_name, smi.movie_showing_date, movie_name, mg.movie_genre_name , movie_running_time, movie_production_year ,s.screen_location, smi.movie_showing_time
		, m.movie_id, s.screen_id, tb.branch_id , s.screen_row * s.screen_line as screen_seat_count
		from screen_movie_information smi join screen s 
		on smi.screen_id = s.screen_id join movie m 
		on smi.movie_id = m.movie_id join theater_branch tb 
		on tb.branch_id  = s.branch_id join movie_genre mg 
		on m.movie_genre_id = mg.movie_genre_id
		where tb.branch_id = #{branch_id}
	</select> -->
	 <select id="screenlist" resultType="java.util.Map"
		parameterType="int">
		SELECT tb.branch_name, smi.movie_showing_date, m.movie_name, mg.movie_genre_name, 
       m.movie_running_time, m.movie_production_year, s.screen_location, 
       m.movie_id, s.screen_id, tb.branch_id, s.screen_row * s.screen_line as screen_seat_count
		FROM screen_movie_information smi 
		JOIN screen s ON smi.screen_id = s.screen_id 
		JOIN movie m ON smi.movie_id = m.movie_id 
		JOIN theater_branch tb ON tb.branch_id = s.branch_id 
		JOIN movie_genre mg ON m.movie_genre_id = mg.movie_genre_id
		WHERE tb.branch_id = #{branch_id}
		GROUP BY m.movie_name, s.screen_id;
	</select> 
	

	<select id="writeajaxlist" resultType="java.util.Map" parameterType="int">
		SELECT movie_id, MV.movie_genre_id, movie_genre_name,
		movie_name, movie_running_time, movie_production_year,
		movie_audience_rating, movie_rank, movie_image, movie_video,
		director_name, actor_name
		FROM movie MV join movie_genre MG
		ON
		MV.movie_genre_id = MG.movie_genre_id
		where movie_id = #{movie_id};
	</select>


<!-- write페이지 ajax -->
<!-- 	<select id="moviecheck" resultType="java.util.Map" -->
<!-- 		parameterType="int"> -->
<!-- 		SELECT movie_id, MG.movie_genre_id, movie_genre_name, -->
<!-- 		movie_name, movie_running_time, movie_production_year, -->
<!-- 		movie_audience_rating, movie_rank, movie_image, movie_video, -->
<!-- 		director_name, actor_name -->
<!-- 		FROM movie MV join movie_genre MG -->
<!-- 		on -->
<!-- 		MV.movie_genre_id = MG.movie_genre_id -->
<!-- 		where movie_id = #{movie_id} -->
<!-- 	</select> -->

	<insert id="theaterinsert" parameterType="java.util.Map">
		INSERT INTO screen_movie_information(movie_id, screen_id, branch_id,
		movie_showing_date, movie_showing_time)
		VALUES (#{movie_id}, #{screen_id}, #{branch_id}, #{movie_showing_date},
		#{movie_showing_time})
	</insert>

	<insert id="screeninsert" parameterType="java.util.Map">
		INSERT INTO
		screen(branch_id, screen_location,
		screen_row,
		screen_line)
		VALUES (#{branch_id}, #{screen_location},
		#{screen_row}, #{screen_line})
	</insert>
=======
>>>>>>> ad2f1f70d66a628ba2e059671f2e5162d66a1945
	
	<select id="movieselectbox" resultType="java.util.Map">
		select m.movie_id , m.movie_name 
		from screen_movie_information smi join movie m 
		on smi.movie_id = m.movie_id
		where smi.screen_id = #{screen_id}
	</select>
	
	<select id="Rental_inquiry_area" resultType="String">
		select region 
		from region
		where region_id = #{rental_inquiry_area}
	</select>
	
	<select id="rental_inquiry_place" resultType="String">
		select branch_name 
		from theater_branch
		where branch_id = #{rental_inquiry_place}
	</select>
	
	<select id="rental_inquiry_theater" resultType="String">
		select screen_location 
		from screen
<<<<<<< HEAD
		where branch_id = #{branch_id}
	</select> -->
	
	<select id="timecheck" resultType="kr.co.fmos.theater.Screen_movie_informationDTO">
		select TIME_FORMAT(movie_showing_time, '%H:%i') as movie_showing_time, movie_id , branch_id , screen_id
		from screen_movie_information
	</select>
	
	<select id="writebranchlist"
		resultType="kr.co.fmos.theater.TheaterbranchDTO">
		SELECT branch_id, region_id, branch_name, branch_address,
		branch_number, branch_img
		FROM theater_branch
	</select>

	<select id="screenajaxlist"
		resultType="kr.co.fmos.theater.ScreenDTO" parameterType="int">
		SELECT screen_id, branch_id, screen_location,
		screen_row, screen_line
		FROM screen 
        WHERE branch_id = #{branch_id}
	</select>
	
	<!-- customer 호출 시작 -->
	<select id="region_customer"
		resultType="kr.co.fmos.theater.TheaterregionDTO">
		SELECT region, region_id
		FROM region
	</select>
	<!-- customer 호출 끝 -->
	
	<!-- 구조화된 값을 담을떄는 그냥 구조에 맞춰 DTO클래슬 만들면 되지만, -->
	<!-- 그냥 여기 저기 테이블에 있는 값을 조인후 가져와서 잠깐 쓸거면 Map에 담으면 됩니다 -->
	<!-- <select id="screenlist2" resultType="kr.co.fmos.theater.Screen_movie_informationDTO" 
		parameterType="int"> -->
	<!-- SELECT DISTINCT region_id, TB.branch_id, branch_name, TB.branch_img, -->
	<!-- movie_showing_date, movie_name, movie_genre_id, movie_running_time, -->
	<!-- movie_production_year, screen_location, screen_seat_count, -->
	<!-- movie_showing_time -->
	<!-- FROM screen SC JOIN screen_movie_information SMI -->
	<!-- ON SC.screen_id = SMI.screen_id JOIN theater_branch TB -->
	<!-- ON region_id = TB.region_id JOIN movie MV -->
	<!-- ON SMI.movie_id = MV.movie_id -->
	<!-- where TB.branch_id = #{branch_id} -->
	<!-- ORDER BY screen_location -->
	<!-- </select> -->
=======
		where screen_id = #{rental_inquiry_theater}
	</select>
	
	<select id="rental_inquiry_movie" resultType="String">
		select movie_name 
		from movie
		where movie_id = #{movie_id}
	</select>
	
	<!-- CustomerCont 에서 호출 끝 -->

   <!-- <select id="branchlist" -->
   <!-- resultType="kr.co.fmos.theater.Screen_movie_informationDTO" -->
   <!-- parameterType="String"> -->
   <!-- SELECT TB.region_id, TB.branch_name, TB.branch_address, -->
   <!-- TB.branch_id, branch_number -->
   <!-- FROM theater_branch TB JOIN screen_movie_information SMI -->
   <!-- ON TB.branch_id = SMI.branch_id -->
   <!-- WHERE TB.region_id = #{region_id} -->
   <!-- </select> -->

   <!-- 지역 -> 지점 ajax -->
   <select id="checkList"
      resultType="kr.co.fmos.theater.TheaterbranchDTO"
      parameterType="String">
      select branch_id , region_id, branch_name
      from
      theater_branch
      where region_id = #{check}
   </select>

   <select id="branchimg"
      resultType="kr.co.fmos.theater.TheaterbranchDTO">
      SELECT branch_img
      FROM theater_branch
      WHERE branch_id =
      #{branch_id}
   </select>
>>>>>>> ad2f1f70d66a628ba2e059671f2e5162d66a1945

   <select id="screenlist" resultType="java.util.Map"
      parameterType="kr.co.fmos.theater.Screen_movie_informationDTO">
      SELECT tb.branch_name, smi.movie_showing_date, m.movie_name,
      mg.movie_genre_name,
      m.movie_running_time, m.movie_production_year, s.screen_location,
      m.movie_id, s.screen_id, tb.branch_id, s.screen_row * s.screen_line as
      screen_seat_count
      FROM screen_movie_information smi
      JOIN screen s ON smi.screen_id = s.screen_id
      JOIN movie m ON smi.movie_id = m.movie_id
      JOIN theater_branch tb ON tb.branch_id = s.branch_id
      JOIN movie_genre mg ON m.movie_genre_id = mg.movie_genre_id
      WHERE tb.branch_id = #{branch_id}
      GROUP BY m.movie_name, s.screen_id
   </select>

<<<<<<< HEAD
	<select id="moviewritelist" resultType="java.util.Map"
		parameterType="int">
		SELECT movie_id, movie_name
		FROM movie
	</select>

	<select id="writelist" resultType="java.util.Map"
		parameterType="int">
		SELECT movie_id, movie_name
		FROM movie
	</select>

=======
   <select id="writeajaxlist" resultType="java.util.Map"
      parameterType="int">
      SELECT movie_id, MV.movie_genre_id, movie_genre_name,
      movie_name, movie_running_time, movie_production_year,
      movie_audience_rating, movie_rank, movie_image, movie_video,
      director_name, actor_name
      FROM movie MV join movie_genre MG
      ON
      MV.movie_genre_id = MG.movie_genre_id
      where movie_id = #{movie_id};
   </select>

   <insert id="theaterinsert" parameterType="java.util.Map">
      INSERT INTO
      screen_movie_information(movie_id, screen_id, branch_id,
      movie_showing_date, movie_showing_time)
      VALUES (#{movie_id},
      #{screen_id}, #{branch_id}, #{movie_showing_date},
      #{movie_showing_time})
   </insert>

   <select id="timecheck"
      resultType="kr.co.fmos.theater.Screen_movie_informationDTO">
      select TIME_FORMAT(movie_showing_time, '%H:%i') as
      movie_showing_time, movie_id , branch_id , screen_id
      from
      screen_movie_information
   </select>

   <!-- customer 호출 시작 -->
   <select id="region_customer"
      resultType="kr.co.fmos.theater.TheaterregionDTO">
      SELECT region_id, region
      FROM region
   </select>
   <!-- customer 호출 끝 -->


   <!-- 상영관 추가 페이지 시작 -->
   <select id="writebranchlist"
      resultType="kr.co.fmos.theater.TheaterbranchDTO">
      SELECT branch_id, region_id, branch_name, branch_address,
      branch_number, branch_img
      FROM theater_branch
   </select>

   <select id="screenajaxlist"
      resultType="kr.co.fmos.theater.ScreenDTO" parameterType="int">
      SELECT
      screen_id, branch_id, screen_location,
      screen_row, screen_line
      FROM
      screen
      WHERE branch_id = #{branch_id}
   </select>

   <select id="moviewritelist" resultType="java.util.Map"
      parameterType="int">
      SELECT movie_id, movie_name
      FROM movie
   </select>

   <select id="writelist" resultType="java.util.Map"
      parameterType="int">
      SELECT movie_id, movie_name
      FROM movie
   </select>

   <!-- 상영관 추가 페이지 끝 -->
>>>>>>> ad2f1f70d66a628ba2e059671f2e5162d66a1945
</mapper>